package org.usfirst.frc620.Warbots2015.commands;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc620.Warbots2015.Robot;
import org.usfirst.frc620.Warbots2015.RobotMap;

import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.Joystick.RumbleType;

public class  movePicker extends Command {
	double axis1;
	boolean done;
	Joystick xbox;
	//	Joystick joystick;
	DigitalInput limitBottom, limitTop;
	JoystickButton button2,button3,button4,button5,button6;
	JoystickButton buttonLift, buttonLower;
	JoystickButton reverse;
	Joystick.RumbleType kLeftRumble;
	Joystick.RumbleType kRightRumble;
	double liftPicker, lowerPicker, meanPicker;


	public movePicker() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.picker);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	public movePicker(double speed, double time){

	}

	protected void initialize() {
		done = false;
		xbox = Robot.oi.getxbox();
		//joystick = Robot.oi.getJoystick1();
		limitBottom = RobotMap.pickerlimitSwitchBottom;
		limitTop = RobotMap.pickerlimitSwitchTop;
		button5 = new JoystickButton(xbox,5);
		button6 = new JoystickButton(xbox,6);
		reverse = new JoystickButton(xbox,8);
		//		buttonLift = new JoystickButton(joystick, 7);
		//		buttonLower = new JoystickButton(joystick,8);
		System.out.println("movePicker init");
		axis1 = 0;

	}

	protected void execute() {
		liftPicker = xbox.getRawAxis(3);		
		lowerPicker = -xbox.getRawAxis(4);
		meanPicker = .5*(liftPicker + lowerPicker);

		SmartDashboard.getBoolean("Bottom Limit Switch", RobotMap.pickerlimitSwitchBottom.get());
		SmartDashboard.getBoolean("Upper Limit Switch", RobotMap.pickerlimitSwitchTop.get());

		System.out.println("Bottom Limit Switch: " + RobotMap.pickerlimitSwitchBottom.get());
		System.out.println("Top Limit Switch: " + RobotMap.pickerlimitSwitchTop.get());

		if(limitBottom.get()){										//may need to switch the signs depending on mechanism
			System.out.println("limitBottom.get()");
			Robot.picker.setSpeed(meanPicker);	//as the motor may be reversed
		}else if(limitTop.get()){
			Robot.picker.setSpeed(-meanPicker);
			System.out.println("limitTop.get()");
		}else{
			if(Math.abs(meanPicker)<0.2) Robot.picker.setSpeed(0);
			else  Robot.picker.setSpeed(-meanPicker);
		}

	}

	protected boolean isFinished() {
		return done;
	}

	protected void end() {
		Robot.picker.setSpeed(0);
	}

	protected void interrupted() {
	}
}
