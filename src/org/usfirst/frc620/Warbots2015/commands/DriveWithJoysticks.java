package org.usfirst.frc620.Warbots2015.commands;

import org.usfirst.frc620.Warbots2015.Robot;



import org.usfirst.frc620.Warbots2015.RobotMap;
import org.usfirst.frc620.Warbots2015.commands.turnLeft;

import com.kauailabs.navx_mxp.AHRS;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

/**
 *
 */
public class  DriveWithJoysticks extends Command {
	//	Joystick stick;
	Joystick xbox;

	private final AHRS imu = RobotMap.imu;
	double x, y, z, theta, throttle; //joystick
	//double start, now; //time
	Timer timer;
	public JoystickButton button2;
	JoystickButton button3, button4, button5, button6;
	JoystickButton pneumaticsExtend, pneumaticsRetract;
	public boolean fieldCentric;
	boolean triggerMode;

	public DriveWithJoysticks() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveTrain);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		System.out.println("Drive with joysticks init");
		//    	stick = Robot.oi.getJoystick1();
		xbox = Robot.oi.getxbox();

		//    	triggerMode = stick.getTrigger();

		imu.zeroYaw();
		//timer.start();
		//start = timer.getFPGATimestamp();
		//    	button3 = new JoystickButton(stick,2);
		//    	button3 = new JoystickButton(stick,3);
		//    	button4 = new JoystickButton(stick,4);
		//    	button5 = new JoystickButton(stick,5);
		//    	button6 = new JoystickButton(stick,6);

		pneumaticsExtend = new JoystickButton(Robot.oi.getxbox(), 1); //button A
		pneumaticsRetract = new JoystickButton(Robot.oi.getxbox(), 2); //button B

	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		x=xbox.getRawAxis(0);
		y=xbox.getRawAxis(1);
		z=xbox.getRawAxis(4);

		//    	if (!triggerMode) throttle = 1-((stick.getThrottle()/2)+.5);
		//    	else throttle = .2;

		theta = imu.getYaw();
		Robot.driveWithJoysticks.fieldCentric = (boolean) Robot.fieldCentricChooser.getSelected();

		//dead zones
		if(Math.abs(x)<0.1) x=0;
		if(Math.abs(y)<0.1) y=0;
		if(Math.abs(z)<0.2) z=0;

		//turning buttons
//		if(button3.get()) new turnLeft(1);
//		if(button4.get()) new turnRight(1);
//		if(button5.get()) new turnAroundLeft(1);
//		if(button6.get()) new turnAroundRight(1);
//
		if (pneumaticsExtend.get()) new extend(true);
		if (pneumaticsRetract.get()) new retract(true);


		//field centric vs regular drive
		//    	if(fieldCentric)
		//    		Robot.driveTrain.mecanumDrive(-x*throttle,y*throttle, z*throttle, -theta); 
		//    	else

		Robot.driveTrain.mecanumDrive(-Math.pow(x*throttle,3),Math.pow(y*throttle,3),Math.pow(z*throttle,3), 0); 

		SmartDashboard.putNumber("angle", theta);
		SmartDashboard.putBoolean(  "IMU_Connected",        imu.isConnected());
		SmartDashboard.putBoolean(  "IMU_IsCalibrating",    imu.isCalibrating());
		SmartDashboard.putNumber(   "IMU_Yaw",              imu.getYaw());
		SmartDashboard.putNumber(   "IMU_Pitch",            imu.getPitch());
		SmartDashboard.putNumber(   "IMU_Roll",             imu.getRoll());
		SmartDashboard.putNumber(   "IMU_CompassHeading",   imu.getCompassHeading());
		SmartDashboard.putNumber(   "IMU_Update_Count",     imu.getUpdateCount());
		SmartDashboard.putNumber(   "IMU_Byte_Count",       imu.getByteCount());

		// If you are using the IMUAdvanced class, you can also access the following
		// additional functions, at the expense of some extra processing
		// that occurs on the CRio processor

		SmartDashboard.putNumber(   "IMU_Accel_X",          imu.getWorldLinearAccelX());
		SmartDashboard.putNumber(   "IMU_Accel_Y",          imu.getWorldLinearAccelY());
		SmartDashboard.putBoolean(  "IMU_IsMoving",         imu.isMoving());
		SmartDashboard.putNumber(   "IMU_Temp_C",           imu.getTempC());

		SmartDashboard.putNumber(   "Velocity_X",       	imu.getVelocityX() );
		SmartDashboard.putNumber(   "Velocity_Y",       	imu.getVelocityY() );
		SmartDashboard.putNumber(   "Displacement_X",       imu.getDisplacementX() );
		SmartDashboard.putNumber(   "Displacement_Y",       imu.getDisplacementY() );
		SmartDashboard.putData("Gyro", RobotMap.imu);
		SmartDashboard.putData("Gyro", RobotMap.imu);

	}

	protected boolean isFinished() {
		return false;
	}

	protected void end() {
	}

	protected void interrupted() {
	}
}
